name: Pull Request

on:
 push:
    branches:
      - main

jobs:
 test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install Flutter SDK and Fastlane
        run: |
          INSTALL_LOCATION=$HOME/usr/development
          FLUTTER_VERSION=3.16.0

          if [ ! -d "$INSTALL_LOCATION/flutter" ]; then
            mkdir -p "$INSTALL_LOCATION"
            
            
            curl -o flutter_sdk.tar.xz https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_$FLUTTER_VERSION-stable.tar.xz
            tar xf flutter_sdk.tar.xz -C "$INSTALL_LOCATION"
            rm -f flutter_sdk.tar.xz

            
            echo "export PATH=$INSTALL_LOCATION/flutter/bin:\$PATH" >> "$HOME/.bashrc"
            source "$HOME/.bashrc"

            
            flutter --version
          fi
      - name: test
        run: |
          name: Install Flutter SDK if it does not exist
          command: |
            INSTALL_LOCATION=$(eval "echo $ORB_EVAL_INSTALL_LOCATION")

            if [ ! -d "$INSTALL_LOCATION/flutter" ]; then
              mkdir -p "$INSTALL_LOCATION"
              if [ "$(uname)" == 'Darwin' ]; then
                curl -o flutter_sdk.zip https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos_$ORB_VAL_FLUTTER_SDK_VERSION-stable.zip
                unzip -qq flutter_sdk.zip -d "$INSTALL_LOCATION"
                rm flutter_sdk.zip
              elif uname -a | grep -q "Linux" ; then
                curl -o flutter_sdk.tar.xz https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_$ORB_VAL_FLUTTER_SDK_VERSION-stable.tar.xz
                tar xf flutter_sdk.tar.xz -C "$INSTALL_LOCATION"
                rm -f flutter_sdk.tar.xz
              else
                echo "This platform ($(uname -a)) is not supported."
                exit 1
              fi
            fi

            echo "export PATH=$INSTALL_LOCATION/flutter/bin:\$PATH" >> "$BASH_ENV"

            
            source "$BASH_ENV"
            which flutter

          environment:
            ORB_EVAL_INSTALL_LOCATION: <<parameters.install-location>>
            ORB_VAL_FLUTTER_SDK_VERSION: <<parameters.version>>

          
          gem install fastlane -NV

        
          fastlane --version

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3
          bundler-cache: true


      - name: Swift Packages Cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            Build/SourcePackages
            Build/Build/Products
          key: ${{ runner.os }}-deps-v1-${{ hashFiles('BILDsolid.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
          restore-keys: ${{ runner.os }}-deps-v1-
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.0.0'

      - name: Install Flutter
        run: |
          flutter pub get

      - name: Install CocoaPods
        run: |
          gem install cocoapods -v '1.14.3'
          pod setup

      - name: Run Flutter tests
        run: flutter test

      - name: Build iOS
        run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload

      - name: Push to Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/debug/*,build/ios/iphoneos/app.ipa"
          tag: v1.0.${{ github.run_number }}
          token: ${{ secrets.TOKEN }}